---
import BeerPage from "../layouts/BeerPage.astro";
import Checklist from "../components/Checklist.astro";
import ToggleHideCompleted from "../components/ToggleHideCompleted.astro";
import CacheManage from "../components/CacheManage.astro";
---

<BeerPage>
    <nav class="small-margin">
        <div class="tabs left-align max scroll">
            <a data-ui="#tabCollection">重要物品</a>
            <a data-ui="#tabWalkthrough">流程要点</a>
            <a data-ui="#tabEquipments">披挂</a>
            <a data-ui="#tabGoods">行囊</a>
            <a data-ui="#tabBosses">影神图</a>
            <a data-ui="#tabAbout">关于</a>
        </div>
    </nav>

    <ToggleHideCompleted />

    <div class="page padding" id="tabCollection">
        <Checklist collection="Collection" searchable type="items"/>
    </div>

    <div class="page padding" id="tabWalkthrough">
        <Checklist collection="Walkthrough" searchable type="Walkthrough"/>
    </div>

    <div class="page padding" id="tabEquipments">
        <Checklist collection="Equipment" searchable multicols={4} type="items"/>
    </div>

    <div class="page padding" id="tabGoods">
        <Checklist collection="Good" searchable multicols={4} type="items"/>
    </div>

    <div class="page padding" id="tabBosses">
        <Checklist collection="Boss" searchable multicols={2} type="bosses"/>
    </div>

    <div class="page padding" id="tabAbout">
        <article class="small middle-align center-align">
            <div>
                <h6>参考<span style="font-style: italic"><a href="https://github.com/imhlq/EldenRingCheatSheetCN">EldenRingCheatSheetCN</a></span></h6>
            </div>
        </article>

        <article class="medium middle-align center-align">
            <div>
                <i class="extra">bug_report</i>
                <h5 class="center-align"><a href="https://github.com/lxb007981/BlackMythWukongCheatSheet/issues">提交ISSUE</a></h5>
                <div class="space"></div>
                <CacheManage/>
            </div>
        </article>
    </div>
</BeerPage>


<script>
    const storageVersion = '1.0';
    var profiles;

	window.addEventListener('DOMContentLoaded', () => {
		const tabs = document.querySelectorAll('a[data-ui]');
		tabs.forEach(tab => {
			tab.addEventListener('click', () => {
				tabs.forEach(t => t.classList.remove('active'));
				tab.classList.add('active');
				openTab(tab.getAttribute('data-ui'));
                profiles = JSON.parse(localStorage.getItem('profiles'));
                profiles.tab = tab.getAttribute('data-ui');
                localStorage.setItem('profiles', JSON.stringify(profiles));
			});
		});


        window.addEventListener('profile-changed', reload);
        updateUI();
	});

    function initializeProfile() {
        profiles = JSON.parse(localStorage.getItem('profiles')) || {};
        if (!profiles.checklistData) {
            profiles.checklistData = {};
        }
        if (!profiles.conflicts) {
            profiles.conflicts = {};
        }
        if (!profiles.tab) {
            profiles.tab = "#tabAbout";
        }
        localStorage.setItem('profiles', JSON.stringify(profiles));
        return profiles;
    }

    function updateUI() {
		// Load state from localStorage
		profiles = initializeProfile();
		
        loadChecklistData();
        loadConflicts();
        loadTab();
        loadShowCompleted();
        
		dispatchEvent(new Event('checked-changed'));
    }

    function loadChecklistData() {
        if (profiles.checklistData) {
			for (const collection in profiles.checklistData) {
                const checklistElement = document.querySelector(`check-list[name="${collection}"]`);
                for (const key in profiles.checklistData[collection]) {
                    const checkedValue = profiles.checklistData[collection][key];
                    // Handle the primary checkbox element
                    const element = checklistElement.querySelector(`input[data-id="${key}"]`);
                    if (element) {
                        (element as HTMLInputElement).checked = true;
                    } else {
                        console.warn(`Element with data-id="${key}" not found.`);
                    }

                    // Handle the option element if it's a string
                    if (typeof checkedValue === 'string') {
                        const optionElement = document.querySelector(`input[data-id="${checkedValue}"]`);
                        if (optionElement) {
                            (optionElement as HTMLInputElement).checked = true;
                        }
                    }
                }
			}
		};
    }

    function loadConflicts() {
        if (profiles.conflicts) {
            for (const collection in profiles.conflicts) {
                const checklistElement = document.querySelector(`check-list[name="${collection}"]`);
                Object.values(profiles.conflicts[collection]).forEach(itemIds => {
                    (itemIds as string[]).forEach(itemId => {
                        const element = checklistElement.querySelector(`input[data-id="${itemId}"]`) as HTMLInputElement;
                        element.checked = false;
                        element.disabled = true;
                    });
                });
            }
        }
    }

    function loadTab(){
        if (profiles.tab) {
            const tab = document.querySelector(`[data-ui="${profiles.tab}"]`);
            (tab as HTMLAnchorElement).click();
        };
    }

    function loadShowCompleted(){
        if (profiles.show_completed == false) {
            const toggleBtn = document.querySelector('#show_completed');
            (toggleBtn as HTMLInputElement).click();
        }
    }

    function reload(){
        // uncheck all checkboxes
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            (checkbox as HTMLInputElement).checked = false;
        });
        // load UI
        updateUI();
    }

	function openTab(tabName) {
		var tabcontent;
		tabcontent = document.getElementsByClassName("padding");
		for (var i = 0; i < tabcontent.length; i++) {
			tabcontent[i].classList.remove("active");
		}
		document.querySelector(tabName).classList.add("active");
	}
</script>